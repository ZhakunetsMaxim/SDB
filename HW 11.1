# Домашнее задание к занятию "`Базы данных, их типы" - `Жакунец Максим`


### Инструкция по выполнению домашнего задания

   1. Сделайте `fork` данного репозитория к себе в Github и переименуйте его по названию или номеру занятия, например, https://github.com/имя-вашего-репозитория/git-hw или  https://github.com/имя-вашего-репозитория/7-1-ansible-hw).
   2. Выполните клонирование данного репозитория к себе на ПК с помощью команды `git clone`.
   3. Выполните домашнее задание и заполните у себя локально этот файл README.md:
      - впишите вверху название занятия и вашу фамилию и имя
      - в каждом задании добавьте решение в требуемом виде (текст/код/скриншоты/ссылка)
      - для корректного добавления скриншотов воспользуйтесь [инструкцией "Как вставить скриншот в шаблон с решением](https://github.com/netology-code/sys-pattern-homework/blob/main/screen-instruction.md)
      - при оформлении используйте возможности языка разметки md (коротко об этом можно посмотреть в [инструкции  по MarkDown](https://github.com/netology-code/sys-pattern-homework/blob/main/md-instruction.md))
   4. После завершения работы над домашним заданием сделайте коммит (`git commit -m "comment"`) и отправьте его на Github (`git push origin`);
   5. Для проверки домашнего задания преподавателем в личном кабинете прикрепите и отправьте ссылку на решение в виде md-файла в вашем Github.
   6. Любые вопросы по выполнению заданий спрашивайте в чате учебной группы и/или в разделе “Вопросы по заданию” в личном кабинете.
   
Желаем успехов в выполнении домашнего задания!
   
### Дополнительные материалы, которые могут быть полезны для выполнения задания

1. [Руководство по оформлению Markdown файлов](https://gist.github.com/Jekins/2bf2d0638163f1294637#Code)

---

### Задание 1

1.1 Реляционная модель. Один из основных признаков, который говорит о том что нужно выбирать реляционную СУБД – это высокая нормализация данных, также дополнительными признаками будет необходимость обработки большого кол-ва коротких транзакций, с большей долей операций на вставку.

1.2 Документные СУБД. Документные или документно-ориентированные СУБД - это одна из наиболее популярных разновидностей NoSQL СУБД, где основной единицей логической модели данных является документ - структурированный текст, с определенным синтаксисом. Ее выбирают если нужно хранить объекты в одной сущности, но с разной структурой.

1.3 Иерархическая модель базы данных. Иерархические базы данных — самая ранняя модель представления сложной структуры данных. Информация в иерархической базе организована по принципу древовидной структуры, в виде отношений «предок-потомок». Каждая запись может иметь не более одной родительской записи и несколько подчиненных. Связи записей реализуются в виде физических указателей с одной записи на другую.

1.4 Сетевые базы данных. Сетевая база данных – это модель данных, где несколько записей или файлов могут быть связаны с несколькими владельцами файлов и наоборот. Модель может рассматриваться как перевернутое дерево, где каждый член – это отрасли, связанные с владельцем, который находится в нижней части дерева. По сути, это отношения в чистой форме, где один элемент может указывать на множество элементов данных, и само по себе может быть указано несколько элементов данных.

---

### Задание 2

Получаем данные со счета пополнения
Уменьшаем счет пополнения
Обновляем счет пополнения
Получаем данные счета телефона
Увеличиваем счет телефона
Обновляем счет телефона

---

### Задание 3

NoSQL - лучший выбор, когда: 
ACID свойства не требуются 
Реализация логики ограничений и проверок не является обязательной Необходимо анализировать большие, переменные наборы данных 
Регистрация данных из распределенных источников 
Требуется более гибкая схема 
Хранение временных данных 
Четкого определения схемы не существует


### Задание 4

Выбирать буду по количеству машин,подойдет - MapReduce.
Модель MapReduce содержит в себе основные шаги Map и Reduce, названных аналогично функциям высшего порядка из многих языков программирования, применяемым на этих шагах. Программы, использующие реализацию MapReduce, автоматически распараллеливаются и исполняются на кластере, состоящем из множества связанных между собой компьютеров. Исполнительная система сама заботится о деталях разбивания входных данных на части, планировании исполнения программы на наборе машин, обработке сбоев и управлении необходимым сообщением между машинами. Это позволяет программистам даже без опыта работы с параллельными и распределенными системами с лёгкостью использовать ресурсы больших распределенных систем. Библиотеки использующие модель MapReduce написаны на многих языках программирования. Популярная реализация с открытым исходным кодом является частью Apache Hadoop. 
